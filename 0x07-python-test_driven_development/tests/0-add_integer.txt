Test Cases for 0-add_integer module
===================================

The 0-add_integer module takes two arguments (both should be either integer or float) and return their sum (integer)

Usage
=====

Importing the module
	>>> add_integer = __import__('0-add_integer').add_integer

Integers
========
Adding two postive integers (a = 1 and b = 2)
::
	>>> add_integer(1, 2)
	3

Adding one negative integer and one positive integer.
::
	>>> add_integer(-1, 2)
	1
	>>> add_integer(1, -2)
	-1

Adding two negative integers
::
	>>> add_integer(-2, -3)
	-5

Adding one postive integer and the default b.
::
	>>> add_integer(2)
	100

Adding one negative integer and the default b.
::
	>>> add_integer(-2)
	96

Adding an integer and a string.
::
        >>> add_integer(2, "string")
        Traceback (most recent call last):
                ...
        TypeError: b must be an integer
        >>> add_integer("string", 2)
        Traceback (most recent call last):
                ...
        TypeError: a must be an integer
        >>> add_integer(-2, "string")
        Traceback (most recent call last):
                ...
        TypeError: b must be an integer
        >>> add_integer("last", -2)
        Traceback (most recent call last):
                ...
        TypeError: a must be an integer

Floats
======
Adding two positive floats.
::
	>>> add_integer(2.3, 2.5)
	4

Adding one positve float and one positive integer.
::
	>>> add_integer(2.5, 5)
	7

Adding one negative float and one positve integer.
::
	>>> add_integer(-3.5, 5)
	2
	>>> add_integer(5, -3.5)
	2

Adding two negative float.
::
	>>> add_integer(-10.3, -2.2)
	-12

Adding one positive float and the default.
::
	>>> add_integer(2.2)
	100

Adding one negative float and the default.
::
	>>> add_integer(-2.2)
	96

Adding one float and a string.
::
	>>> add_integer(2.2, "string")
	Traceback (most recent call last):
		...
	TypeError: b must be an integer
	>>> add_integer("string", 2.2)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer
	>>> add_integer(-2.2, "string")
	Traceback (most recent call last):
		...
	TypeError: b must be an integer
	>>> add_integer("last", -2.2)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

string
======
Adding a string.
::
	>>> add_integer("hello")
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

List
====
::
	>>> add_integer([])
	Traceback (most recent call last):
		...
	TypeError: a must be an integer
	>>> add_integer(2, [])
	Traceback (most recent call last):
		...
	TypeError: b must be an integer
	>>> add_integer([], 2)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Tuple
=====
::
	>>> add_integer((2, 2))
	Traceback (most recent call last):
		...
	TypeError: a must be an integer
	>>> add_integer(2, (2, 2))
	Traceback (most recent call last):
		...
	TypeError: b must be an integer

floating-point literal for postive and negative infinity
=========================================================
::
	>>> add_integer(float('inf'))
	Traceback (most recent call last):
		...
	OverflowError: cannot convert float infinity to integer
	>>> add_integer(float('inf'), float('inf'))
	Traceback (most recent call last):
		...
	OverflowError: cannot convert float infinity to integer
	>>> add_integer(2, float('inf'))
	Traceback (most recent call last):
		...
	OverflowError: cannot convert float infinity to integer

floating-point value for undefined result in arithmetic operations
==================================================================
::
	>>> add_integer(float('nan'))
	Traceback (most recent call last):
		...
	ValueError: cannot convert float NaN to integer
	>>> add_integer(2, float('nan'))
	Traceback (most recent call last):
		...
	ValueError: cannot convert float NaN to integer
